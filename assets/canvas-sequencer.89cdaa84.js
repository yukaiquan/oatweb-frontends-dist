var n={},c={};const o={METHOD:"method",PROPERTY:"property"};class h{constructor(e,t){this.inst=e,this.args=t}}class v extends h{constructor(e,t){super(e,t),this.type=o.METHOD}execute(e){e[this.inst](...this.args)}}class O extends h{constructor(e,t){super(e,t),this.type=o.PROPERTY}execute(e){e[this.inst]=this.args[0]}}const g={[o.METHOD]:v,[o.PROPERTY]:O};class d{constructor(e,t,a){return new g[e](t,a)}}Object.entries(o).forEach(([r,e])=>{Object.defineProperty(d,r,{value:e,configurable:!1,enumerable:!0,writable:!1})});c=d;const p=Object.freeze({METHODS:["addHitRegion","arc","arcTo","beginPath","bezierCurveTo","clearHitRegions","clearRect","clip","closePath","drawFocusIfNeeded","drawImage","ellipse","fill","fillRect","fillText","lineTo","moveTo","putImageData","quadraticCurveTo","rect","removeHitRegion","resetTransform","restore","rotate","save","scale","scrollPathIntoView","setLineDash","setTransform","stroke","strokeRect","strokeText","transform","translate"],PROPERTIES:["direction","fillStyle","filter","font","globalAlpha","globalCompositeOperation","imageSmoothingEnabled","imageSmoothingQuality","lineCap","lineDashOffset","lineJoin","lineWidth","miterLimit","shadowBlur","shadowColor","shadowOffsetX","shadowOffsetY","strokeStyle","textAlign","textBaseline"]}),s=Object.freeze({sequence:Symbol.for("sequence"),push:Symbol.for("push"),fromJSON:Symbol.for("fromJSON")});class l{constructor(e=null){this[s.sequence]=[],e&&this[s.fromJSON](e)}[s.fromJSON](e={sequence:[]}){e.sequence.forEach(({type:t,inst:a,args:f})=>{this[s.push](t,a,f)})}[s.push](e,t,a){this[s.sequence].push(new c(e,t,a))}execute(e){e.save(),this[s.sequence].forEach(t=>t.execute(e)),e.restore()}toJSON(){return{sequence:this[s.sequence]}}}p.METHODS.forEach(r=>{Object.defineProperty(l.prototype,r,{value:function(...t){this[s.push](c.METHOD,r,t)},writable:!1,enumerable:!0,configurable:!1})});p.PROPERTIES.forEach(r=>{Object.defineProperty(l.prototype,r,{get(){throw`Invalid canvas sequencer interaction, cannot get ${r}.`},set(e){this[s.push](c.PROPERTY,r,[e])},enumerable:!0,configurable:!1})});n=l;var $={};const u=Object.freeze({sequence:Symbol.for("sequence"),push:Symbol.for("push")});function y(r,e){const t=r.replace(/^\{|\}$/gu,"");return t!==r?e.hasOwnProperty(t)?e[t]:t:r}class T extends n{build(e={}){const t=new n;return this[u.sequence].forEach(({type:a,inst:f,args:b})=>{const m=b.map(i=>typeof i=="string"?y(i,e):i);t[u.push](a,f,m)}),t}execute(){throw new TypeError("Cannot execute a blueprint.")}}$=T;var E={CanvasSequence:n,CanvasBlueprint:$};export{E as d};
